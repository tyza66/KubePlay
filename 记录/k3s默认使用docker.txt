先安装好docker

curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC="--docker" sh -

curl -sfL https://rancher-mirror.rancher.cn/k3s/k3s-install.sh | INSTALL_K3S_EXEC="--docker" INSTALL_K3S_MIRROR=cn sh -

^Cubuntu@k3s:~$ curl -sfL https://rancher-mirror.rancher.cn/k3s/k3s-install.sh | INSTALL_K3S_EXEC="--docker" INSTALL_K3S_MIRROR=cn sh -
[INFO]  Finding release for channel stable
[INFO]  Using v1.31.5+k3s1 as release
[INFO]  Downloading hash rancher-mirror.rancher.cn/k3s/v1.31.5-k3s1/sha256sum-amd64.txt
[INFO]  Downloading binary rancher-mirror.rancher.cn/k3s/v1.31.5-k3s1/k3s
[INFO]  Verifying binary download
[INFO]  Installing k3s to /usr/local/bin/k3s
[INFO]  Skipping installation of SELinux RPM
[INFO]  Creating /usr/local/bin/kubectl symlink to k3s
[INFO]  Creating /usr/local/bin/crictl symlink to k3s
[INFO]  Skipping /usr/local/bin/ctr symlink to k3s, command exists in PATH at /usr/bin/ctr
[INFO]  Creating killall script /usr/local/bin/k3s-killall.sh
[INFO]  Creating uninstall script /usr/local/bin/k3s-uninstall.sh
[INFO]  env: Creating environment file /etc/systemd/system/k3s.service.env
[INFO]  systemd: Creating service file /etc/systemd/system/k3s.service
[INFO]  systemd: Enabling k3s unit
Created symlink /etc/systemd/system/multi-user.target.wants/k3s.service → /etc/systemd/system/k3s.service.
[INFO]  systemd: Starting k3s

验证
kubectl describe node $(hostname) | grep -i 'container runtime'
Container Runtime Version: docker://<version>

配置好docker加速镜像

K102535f1f90bbd112b0b8308c94a0c0a1ab4662c432a3eeaf497999e8389986716::server:0ed24d734e85fefc54dde1355f68e0e9

从节点也一样需要配置好docker一样的
curl -sfL https://rancher-mirror.rancher.cn/k3s/k3s-install.sh | INSTALL_K3S_MIRROR=cn K3S_URL="https://172.30.46.50:6443" K3S_TOKEN="K102535f1f90bbd112b0b8308c94a0c0a1ab4662c432a3eeaf497999e8389986716::server:0ed24d734e85fefc54dde1355f68e0e9" INSTALL_K3S_EXEC="--docker" sh -

试一下
kubectl run nginx --image=nginx --port=80
kubectl get pods
kubectl describe pod nginx

发现可以了

sudo kubectl create deployment nginx-deployment --image=nginx
kubectl get deployment
创建deployment的时候kube会根据我们刚刚的配置创建一个pod


kubectl get replicaset 这个是在deployment和pod之间的中间层 用来管理pod的

deployment管理replicaset 
replicaset 管理 pod


可以使用
kubectl create -f nginx-deployment.yaml
kubectl apply -f nginx-deployment.yaml
kubectl get pod -o wide 查看pod的地址

使用命令行创建服务
kubectl create service mginx-service
kubectl expose deployment nginx-deployment

kubectl delete service nginx-deployment

kubectl get all

还可以用配置文件添加服务
kubectl  apply -f nginx-service.yaml

之后需要使用nodePort服务将服务公开到节点上
修改配置文件后kubectl  apply -f nginx-service.yaml


使用可视化管理工具
# 在master节点上安装portainer，并将其暴露在NodePort 30777上
kubectl apply -n portainer -f https://downloads.portainer.io/ce2-19/portainer.yaml
-n是用来指定命名控件的  可以隔离分组
kebectl get ns 可以查看命名空间  如果不指定命名空间都是存在default 

默认查看的时候没指定也是看的default
如果指定了 查看的是也要 kubectl get all -n portainer

http://172.30.46.50:30777/







